{"version":3,"sources":["component/Navbar.js","Home.js","login.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","id","data-toggle","React","Component","cookies","Cookies","Home","state","token","get","this","setState","history","push","withRouter","Login","handleChange","bind","handleClick","e","onChangeText","target","value","details","email","password","formBody","property","encodedKey","encodeURIComponent","encodedValue","join","console","log","fetch","method","headers","body","then","response","json","data","success","set","path","style","marginTop","width","borderRadius","type","onChange","placeholder","onClick","App","key","exact","onLogin","login","onLocate","gologin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47ea7ab6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nexport default class Navbar extends React.Component{\r\n    constructor(props){\r\n      super(props)\r\n  \r\n    }\r\n    render(){\r\n      \r\n      return (\r\n        <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n          <a className=\"navbar-brand\" href=\"#\">Logo</a>\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Link 1</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Link 2</a>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\r\n                Dropdown link\r\n              </a>\r\n              <div className=\"dropdown-menu\">\r\n                <a className=\"dropdown-item\" href=\"#\">Link 1</a>\r\n                <a className=\"dropdown-item\" href=\"#\">Link 2</a>\r\n                <a className=\"dropdown-item\" href=\"#\">Link 3</a>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      )\r\n    }\r\n  }","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Navbar from './component/Navbar.js';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\nconst cookies = new Cookies();\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token : this.props.token,\r\n        }\r\n        \r\n    }\r\n    render(){\r\n        if(cookies.get('email') == null || this.state.token == null){\r\n            this.setState({token:''});\r\n            this.props.history.push('/')\r\n        }\r\n        return(\r\n            <div>\r\n            <Navbar />\r\n            \r\n                Wow\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Home);","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Navbar from './component/Navbar.js'\r\nimport Cookies from 'universal-cookie';\r\nconst cookies = new Cookies();\r\n  class Login extends React.Component{\r\n    \r\n    constructor(props){\r\n      super(props)\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleClick = this.handleClick.bind(this);\r\n    \r\n      if(cookies.get('email') != null){\r\n          this.props.history.push('/home')\r\n      }\r\n    }\r\n    handleChange(e){\r\n      this.props.onChangeText(e.target.id, e.target.value);\r\n    }\r\n    handleClick(){\r\n        \r\n\r\n      let token;\r\n      var details = {\r\n        'email': this.props.email,\r\n        'password':this.props.password\r\n      }\r\n      var formBody = [];\r\n      for (var property in details) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n      }\r\n      formBody = formBody.join(\"&\");\r\n      console.log(formBody);\r\n      fetch(\"http://127.0.0.1:8000/api/login\",{\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n      }).then(response => response.json()).then((data)=> {this.props.onChangeText('token',data.success.token);token = data.success.token;cookies.set('email', this.props.email, { path: '/' });this.props.history.push('/home')});\r\n    }\r\n    render(){\r\n      \r\n      return(\r\n        <div>\r\n        <Navbar></Navbar>\r\n        <div className=\"container\" style={{marginTop:'80px'}}>\r\n          <div className=\"card mx-auto\" style={{width: '30%',marginTop: '20%',borderRadius: '10px'}}>\r\n            <div className=\"card-body\">\r\n              <center><h3>Login</h3></center>\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input type=\"email\" onChange={this.handleChange} className=\"form-control\" id=\"email\" placeholder=\"Email\" value={this.props.email} />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Password</label>\r\n                <input type=\"password\" onChange={this.handleChange} className=\"form-control\" id=\"password\" placeholder=\"Password\" value={this.props.password} />\r\n              </div>\r\n              <input type=\"button\" onClick={this.handleClick} value=\"Login\" className=\"btn btn-info\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n  \r\n      )\r\n    }\r\n  }\r\nexport default withRouter(Login);","import React from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Home from './Home';\nimport {BrowserRouter, Switch, Route, Link, useHistory, withRouter} from 'react-router-dom';\nimport Login from './login'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      email : '',\n      password : '',\n      token : '',\n    }\n    \n    this.onChangeText = this.onChangeText.bind(this)\n    \n  }\n  onChangeText(key,value){\n    \n    this.setState({[key]: value});\n  }\n  render(){\n    return (\n      <div>\n        <BrowserRouter>\n            <Route path=\"/\" exact={true}>\n              <Login email={this.state.email} token={this.state.token} password={this.state.password} onChangeText={this.onChangeText} onLogin={this.login} onLocate={this.gologin}></Login>\n            </Route>\n            <Route path=\"/home\">\n              <Home token={this.state.token} />\n            </Route>\n         \n\n        </BrowserRouter>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home';\nimport {BrowserRouter, Switch, Route, Link, useHistory, withRouter} from 'react-router-dom';\nimport LoginPage from './login'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}