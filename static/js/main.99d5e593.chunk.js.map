{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","data","data2","header","Headers","append","fetch","headers","url2","json","response2","console","log","url","response","this","setState","results","movies","React","Component","Navbar","class","href","id","data-toggle","List","map","movie","src","poster_path","alt","style","width","height","title","maxHeight","overflow","textOverflow","overview","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAMMA,G,8DACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,MAAO,IAJO,E,+LAQZC,EAAS,IAAIC,SACVC,OAAO,gBAAgB,m8B,SACXC,MAAM,oCAAoC,CAACC,QAAQJ,I,cAAhEK,E,gBACkBA,EAAKC,O,cAAvBC,E,OACNC,QAAQC,IAAIF,G,UACMJ,MAAM,0F,eAAlBO,E,iBACiBA,EAAIJ,O,QAArBK,E,OACNC,KAAKC,SAAS,CAACf,KAAMa,EAASG,U,sIAG9B,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAMC,OAAQH,KAAKf,MAAMC,Y,GAvBfkB,IAAMC,YA4BlBC,E,kDACJ,WAAYtB,GAAO,uCACXA,G,qDAIN,OACE,yBAAKuB,MAAM,+CACT,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,QACA,wBAAID,MAAM,cACR,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,WAEF,wBAAID,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,WAEF,wBAAID,MAAM,qBACR,uBAAGA,MAAM,2BAA2BC,KAAK,IAAIC,GAAG,aAAaC,cAAY,YAAzE,iBAGA,yBAAKH,MAAM,iBACT,uBAAGA,MAAM,gBAAgBC,KAAK,KAA9B,UACA,uBAAGD,MAAM,gBAAgBC,KAAK,KAA9B,UACA,uBAAGD,MAAM,gBAAgBC,KAAK,KAA9B,kB,GAvBOJ,IAAMC,WA+BrBM,E,kDACJ,WAAY3B,GAAO,uCACXA,G,qDAIN,OACE,yBAAKuB,MAAM,aACT,yBAAKA,MAAM,gBACVP,KAAKhB,MAAMmB,OAAOS,KAAI,SAAAC,GAAK,OAC1B,yBAAKN,MAAM,QACT,yBAAKA,MAAM,WAAWO,IAAK,kCAAkCD,EAAME,YAAaC,IAAI,aAAaC,MAAO,CAACC,MAAM,UAE/G,yBAAKX,MAAM,aACT,wBAAIA,MAAM,aAAaU,MAAO,CAACE,OAAO,SAAUN,EAAMO,OACtD,uBAAGb,MAAM,YAAYU,MAAO,CAACE,OAAO,QAAQE,UAAU,QAAQC,SAAS,SAASC,aAAa,aAAcV,EAAMW,UACjH,uBAAGhB,KAAK,IAAID,MAAM,mBAAlB,0B,GAhBKH,IAAMC,WA4BVtB,ICjFK0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.99d5e593.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: [],\n      data2: [],\n    }\n  }\n  async componentDidMount(){\n    let header = new Headers();\n    header.append(\"Authorization\",\"Bearer \"+ \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZGZkNTViMzQ5Njg3Mjc2NmNjYmM3OTM4NmQ4ODM4YzM3NDU0YjY5OTM4NDVhMzFjMWUxMDgwYmExNGI5ODBmY2IxMTU2NWVmM2UyZTNhYjYiLCJpYXQiOjE1ODY0MTk0MzMsIm5iZiI6MTU4NjQxOTQzMywiZXhwIjoxNjE3OTU1NDMzLCJzdWIiOiI3Iiwic2NvcGVzIjpbXX0.rB8yL06Elqx5wQhGDBl_JB1C5ZxfjI9GJOZ5fSwPzXJl0W8Rhw6d_nmdsz106fK5Pu7lp-IufR2bqkhyTdQ_G0YsyFHfKDmL2APb0D9Cm54axN0-TfAgIc3W9oe3JZT4gLMkf7kD5rv5NFJ8RLnAr1Zn70dUi_89utm0CEQpVZE4hfQEW1hNrhkppVg-XXBvGZ0c99g8CoKKZB7C8-G4MtxF1R9qSrC9XlEhTFNQQIRZWHefxM7Kwt8oQ78VO1qMMMhyCSWyf_Oo44FXdwjXntRamDb_if5PNvdOVECMj4tY-JEkluMuRK43VJ2H7Rjbq-JYiA7URHcLHo4nNFyeyP1x8m86xj0O905UnW4W32aKX9vmswRxqjm4tgrXB93CNvxdiVUdHb7-jDbUerTIWyaAl2KWwP8c-dYYnFfE6CTaEDoZZ1DpyYlsHV3nhCJEuyzK7mqXzIvSlqPCdi17HpBfzSsT8dpnWbd4ZCmbdueMF0T7jG_zU82xdapkY8spqX71Rqj5zAAa_JzocjMYO1IKEmSR1mmTLFhxgw2yJvC2wg0Ja_rPcEd63drzDU9yquTz0_BCPVOZl9i8buc-SZ4RnxOSzYiSl53Ec3738-YiXwsW2-a6plJEawzSvWy6GsDgTDPBLqhOl93hNy4DWbDGRLj_ru8LSDrDv6XIGg8\")\n    const url2 = await fetch('http://127.0.0.1:8000/api/details',{headers:header})\n    const response2 = await url2.json();\n    console.log(response2);\n    const url = await fetch(\"https://api.themoviedb.org/3/trending/all/day?api_key=b53794f49b9172d5d604d1870c9eafae\")\n    const response = await url.json();\n    this.setState({data: response.results})\n  }\n  render(){\n    return (\n      <div>\n        <Navbar></Navbar>\n        \n        <List movies={this.state.data}></List>\n      </div>\n    )\n  }\n}\nclass Navbar extends React.Component{\n  constructor(props){\n    super(props)\n\n  }\n  render(){\n    return (\n      <nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n        <a class=\"navbar-brand\" href=\"#\">Logo</a>\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">Link 1</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">Link 2</a>\n          </li>\n          <li class=\"nav-item dropdown\">\n            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\n              Dropdown link\n            </a>\n            <div class=\"dropdown-menu\">\n              <a class=\"dropdown-item\" href=\"#\">Link 1</a>\n              <a class=\"dropdown-item\" href=\"#\">Link 2</a>\n              <a class=\"dropdown-item\" href=\"#\">Link 3</a>\n            </div>\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\nclass List extends React.Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    \n    return(\n      <div class=\"container\">\n        <div class=\"card-columns\" >\n        {this.props.movies.map(movie =>(\n          <div class=\"card\">\n            <img class=\"card-img\" src={\"https://image.tmdb.org/t/p/w500\"+movie.poster_path} alt=\"Card image\" style={{width:'100%'}} />\n\n            <div class=\"card-body\">\n              <h4 class=\"card-title\" style={{height:\"70px\"}}>{movie.title}</h4>\n              <p class=\"card-text\" style={{height:\"100px\",maxHeight:\"100px\",overflow:'hidden',textOverflow:'ellipsis'}}>{movie.overview}</p>\n              <a href=\"#\" class=\"btn btn-primary\">See Profile</a>\n            </div>\n          </div>\n          \n        ))}\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}